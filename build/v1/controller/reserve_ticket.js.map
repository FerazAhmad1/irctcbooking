{"version":3,"file":"reserve_ticket.js","sourceRoot":"/","sources":["v1/controller/reserve_ticket.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,wDAA0D;AAC1D,gDAG6B;AAC7B,uEAA6C;AAC7C,iFAAyD;AACzD,6EAAyD;AACzD,gDAK6B;AAE7B,iFAAoD;AAQvC,QAAA,qBAAqB,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IACzE,IAAI;QACF,2BAA2B;QAC3B,wBAAwB;QAExB,MAAM,QAAQ,GAAG,MAAM,4BAAe,CAAC,8BAAqB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAExE,oDAAoD;QAEpD,MAAM,gBAAgB,GAAG,yCAAyC,QAAQ,CAAC,WAAW,GAAG,CAAC;QAC1F,MAAM,wBAAwB,GAAG,4CAA4C,QAAQ,CAAC,IAAI,0BAA0B,QAAQ,CAAC,IAAI,+BAA+B,CAAC;QACjK,MAAM,sBAAsB,GAAG,4CAA4C,QAAQ,CAAC,EAAE,0BAA0B,QAAQ,CAAC,EAAE,gCAAgC,CAAC;QAE5J,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,GACtD,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,0BAAW,CAAC,YAAY,CAAC,gBAAgB,CAAC;YAC1C,0BAAW,CAAC,YAAY,CAAC,wBAAwB,CAAC;YAClD,0BAAW,CAAC,YAAY,CAAC,sBAAsB,CAAC;SACjD,CAAC,CAAC;QAEL,mDAAmD;QACnD,IAAI,CAAC,KAAK,IAAI,CAAC,cAAc,IAAI,CAAC,mBAAmB,EAAE;YACrD,MAAM;gBACJ,OAAO,EAAE,8DAA8D;aACxE,CAAC;SACH;QAED,uDAAuD;QACvD,MAAM,iBAAiB,GAAG,cAAc,CAAC,EAAE,CAAC;QAE5C,MAAM,sBAAsB,GAAG,mBAAmB,CAAC,EAAE,CAAC;QAEtD,MAAM,QAAQ,GAAG,KAAK,CAAC,EAAE,CAAC;QAE1B,MAAM,wBAAwB,GAAG,mEAAmE,iBAAiB,qBAAqB,QAAQ,IAAI,CAAC;QAEvJ,MAAM,6BAA6B,GAAG,mEAAmE,sBAAsB,qBAAqB,QAAQ,IAAI,CAAC;QACjK,MAAM,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACpE,0BAAW,CAAC,YAAY,CAAC,wBAAwB,CAAC;YAClD,0BAAW,CAAC,YAAY,CAAC,6BAA6B,CAAC;SACxD,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,IAAI,CAAC,oBAAoB,EAAE;YAC7C,MAAM;gBACJ,OAAO,EACL,sEAAsE;aACzE,CAAC;SACH;QACD,sBAAsB;QACtB,IAAI,eAAe,CAAC,UAAU,GAAG,oBAAoB,CAAC,UAAU,EAAE;YAChE,MAAM;gBACJ,OAAO,EACL,sEAAsE;aACzE,CAAC;SACH;QAED,4FAA4F;QAE5F,yCAAyC;QAEzC,gBAAgB;QAChB,MAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,CAAC;QAC1C,MAAM,aAAa,GAAG,eAAe,CAAC,OAAO,CAAC;QAE9C,MAAM,UAAU,GAAG,oBAAW,CAC5B,KAAK,CAAC,IAAI,EACV,QAAQ,CAAC,SAAS,EAClB,KAAK,CAAC,UAAU,EAChB,aAAa,GAAG,CAAC,CAClB,CAAC;QAEF,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,EAAE,OAAO,EAAE,sCAAsC,EAAE,CAAC;SAC3D;QAED,MAAM,mBAAmB,GAAG,yBAAgB,CAC1C,UAAU,EACV,qBAAqB,CACtB,CAAC;QAEF,MAAM,kBAAkB,GAAG;;2BAEJ,mBAAmB;uBACvB,QAAQ;sBACT,CAAC;KAClB,CAAC;QACF,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,MAAM,0BAAW,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QACrE,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;QAClB,IAAI,KAAK,IAAI,GAAG,EAAE;YAChB,MAAM;gBACJ,OAAO,EAAE,eAAe;aACzB,CAAC;SACH;QACD,IAAI,KAAK,GAAG,GAAG,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,GAAG,EAAE;YAC1D,IAAI,UAAU,GAAG,GAAG,GAAG,KAAK,CAAC;YAC7B,MAAM;gBACJ,OAAO,EAAE,QAAQ,UAAU,sBAAsB;aAClD,CAAC;SACH;QAED,OAAO,CAAC,GAAG,CACT,+BAA+B,EAC/B,UAAU,EACV,mBAAmB,CACpB,CAAC;QAEF,MAAM,mBAAmB,GAAG,oBAAoB,CAAC,OAAO,GAAG,CAAC,CAAC;QAE7D,MAAM,CAAC,SAAS,EAAE,8BAA8B,CAAC,GAAG,oBAAW,CAC7D,UAAU,EACV,gBAAgB,EAChB,aAAa,GAAG,CAAC,CAClB,CAAC;QAEF,MAAM,CAAC,mBAAmB,EAAE,mCAAmC,CAAC,GAC9D,oBAAW,CAAC,UAAU,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG;YACd,mBAAmB;YACnB,mCAAmC;SACpC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACZ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;QAElD,iCAAiC;QACjC,MAAM,MAAM,GAAG,yBAAgB,CAC7B,QAAQ,EACR,QAAQ,CAAC,SAAS,CAAC,MAAM,EACzB,mBAAmB,GAAG,aAAa,CACpC,CAAC;QACF,MAAM,UAAU,GAAG,CAAC,CAAC;QACrB,MAAM,MAAM,GAAG,CAAC,CAAC;QAEjB,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GACtE,QAAQ,CAAC;QACX,MAAM,iBAAiB,GAAG;YACxB,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,MAAM;YACnC,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,OAAO;YACP,MAAM;YACN,MAAM;YACN,YAAY;YACZ,KAAK;YACL,MAAM,EAAE,CAAC;YACT,QAAQ;YACR,OAAO;YACP,OAAO;YACP,KAAK;YACL,GAAG;YACH,MAAM,EAAG,GAAqB,CAAC,IAAI,CAAC,EAAE;YACtC,WAAW,EAAE,mBAAmB;YAChC,QAAQ;YACR,cAAc,EAAE,eAAe,CAAC,EAAE;YAClC,YAAY,EAAE,oBAAoB,CAAC,EAAE;SACtC,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;QACpD,MAAM,QAAQ,GAAG,MAAM,0BAAW,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;QAC5E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACjC,qCAAqC;QAErC,MAAM,wBAAwB,GAAG,MAAM,OAAO,CAAC,GAAG,CAChD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAO,EAAE,EAAE;YAC7D,OAAO,qBAAS,CAAC,gBAAgB,CAAC;gBAChC,UAAU;gBACV,SAAS;gBACT,GAAG,EAAE,yBAAgB,CAAC,GAAG,EAAE,qBAAqB,CAAC;aAClD,CAAC,CAAC;QACL,CAAC,CAAC,CACH,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAEtC,4DAA4D;QAC5D,2DAA2D;QAC3D,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;QACxB,IAAI,QAAQ,GAAa,EAAE,CAAC;QAC5B,MAAM,sBAAsB,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9C,wBAAwB,CAAC,GAAG,CAAC,CAAC,EAAO,EAAE,CAAS,EAAE,EAAE;YAClD,MAAM,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;YAC9B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3B,OAAO,0BAAgB,CAAC,sBAAsB,CAAC;gBAC7C,UAAU,EAAE,EAAE;gBACd,QAAQ,EAAE,QAAQ;gBAClB,WAAW;aACZ,CAAC,CAAC;QACL,CAAC,CAAC,CACH,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QAEpC,MAAM,IAAI,GAAG;YACX,kBAAkB,EAAE,cAAc,CAAC,QAAQ;YAC3C,6BAA6B,EAAE,8BAA8B;YAC7D,qBAAqB,EAAE,QAAQ,CAAC,SAAS;YACzC,wBAAwB,EAAE,mBAAmB,CAAC,QAAQ;YACtD,KAAK,EAAE,QAAQ;YACf,UAAU,EAAE,QAAQ,CAAC,SAAS;YAC9B,mBAAmB;YACnB,mCAAmC;YACnC,YAAY,EAAE,QAAQ,CAAC,WAAW;YAClC,GAAG;SACJ,CAAC;QAEF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,KAAK;YACZ,IAAI;YACJ,OAAO,EAAE,qBAAqB;SAC/B,CAAC,CAAC;QACH,8DAA8D;KAC/D;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,GAAG,GAAG,KAAY,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,IAAI,EAAE,EAAE;SACT,CAAC,CAAC;KACJ;AACH,CAAC,CAAA,CAAC;AAEW,QAAA,cAAc,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IAClE,IAAI;QACF,MAAM,oBAAoB,GAAG,iDAC1B,GAAqB,CAAC,IAAI,CAAC,EAC9B,KAAK,CAAC;QACN,MAAM,wBAAwB,GAAG,yCAC9B,GAAqB,CAAC,IAAI,CAAC,EAC9B,IAAI,CAAC;QAEL,MAAM,CAAC,iBAAiB,EAAE,cAAc,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC5D,0BAAW,CAAC,YAAY,CAAC,wBAAwB,CAAC;YAClD,wBAAkB,CAAC,YAAY,CAAC,oBAAoB,CAAC;SACtD,CAAC,CAAC;QACH,IAAI,OAAO,GAAG,SAAS,CAAC;QACxB,IAAI,CAAC,iBAAiB,IAAI,cAAc,EAAE;YACxC,OAAO,GAAG,iCAAiC,CAAC;SAC7C;QAED,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,EAAE,iBAAiB,EAAE,cAAc,EAAE;SAC5C,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;KACJ;AACH,CAAC,CAAA,CAAC;AAEW,QAAA,aAAa,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IACjE,IAAI;QACF,OAAO,CAAC,GAAG,CAAE,GAAqB,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,QAAQ,GAAG,MAAM,4BAAe,CAAC,6BAAoB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QACvE,MAAM,iBAAiB,GAAG,sDAAsD,QAAQ,CAAC,GAAG,KAAK,CAAC;QAClG,MAAM,MAAM,GAAG,MAAM,0BAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QACjE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,MAAM,EAAE;YACX,MAAM;gBACJ,OAAO,EAAE,mBAAmB;aAC7B,CAAC;SACH;QACD,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;YACtB,MAAM;gBACJ,OAAO,EAAE,mBAAmB;aAC7B,CAAC;SACH;QACD,IAAI,QAAQ,CAAC;QAEb,IAAK,GAAqB,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAClD,MAAM,QAAQ,GAAG,MAAM,0BAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;gBACrE,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACtB,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM;oBACJ,OAAO,EAAE,uBAAuB;iBACjC,CAAC;aACH;YACD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,6BAA6B;gBACtC,IAAI,EAAE;oBACJ,GAAG,EAAE,QAAQ,CAAC,GAAG;iBAClB;aACF,CAAC,CAAC;YACH,OAAO;SACR;aAAM,IAAK,GAAqB,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;YAC9D,MAAM;gBACJ,OAAO,EAAE,kCAAkC;aAC5C,CAAC;SACH;aAAM;YACL,MAAM,QAAQ,GAAG,MAAM,0BAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;gBACrE,MAAM,EAAE,CAAC;aACV,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM;oBACJ,OAAO,EAAE,uBAAuB;iBACjC,CAAC;aACH;YACD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,KAAK;gBACZ,OAAO,EAAE,6BAA6B;gBACtC,IAAI,EAAE;oBACJ,GAAG,EAAE,QAAQ,CAAC,GAAG;iBAClB;aACF,CAAC,CAAC;SACJ;KACF;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,GAAG,GAAG,KAAY,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,IAAI,EAAE,EAAE;SACT,CAAC,CAAC;KACJ;AACH,CAAC,CAAA,CAAC","sourcesContent":["import { Request, Response } from \"express\";\nimport { applyValidation } from \"../helper.ts/validation\";\nimport {\n  reserve_ticket_schema,\n  cancel_ticket_schema,\n} from \"../helper.ts/schema\";\nimport CUSTOMERS from \"../model/dbcustomers\";\nimport CUSTOEMER_TICKET from \"../model/dbcustomerticket\";\nimport general_ticket_obj from \"../model/general_ticket\";\nimport {\n  create_date,\n  calculate_amount,\n  validateDay,\n  formatDateString,\n} from \"../helper.ts/helpfn\";\n\nimport reservation from \"../model/dbreservetickets\";\n\ninterface CustomRequest extends Request {\n  user: {\n    [index: string]: any;\n  };\n}\n\nexport const create_reserve_ticket = async (req: Request, res: Response) => {\n  try {\n    // vaidate login user limit\n    // validate request body\n\n    const validate = await applyValidation(reserve_ticket_schema, req.body);\n\n    // find train source station and destination station\n\n    const find_train_query = `select * from train where t_number = '${validate.trainnumber}'`;\n    const find_source_staion_query = `select * from station where code ILIKE '%${validate.from}%' OR stn_name ILIKE '%${validate.from}%' ORDER BY stn_name LIMIT 1 `;\n    const find_destination_query = `select * from station where code ILIKE '%${validate.to}%' OR stn_name ILIKE '%${validate.to}%' ORDER BY stn_name LIMIT 1  `;\n\n    const [[train], [source_station], [destination_station]] =\n      await Promise.all([\n        reservation.executeQuery(find_train_query),\n        reservation.executeQuery(find_source_staion_query),\n        reservation.executeQuery(find_destination_query),\n      ]);\n\n    // validate if enter input exist in database or not\n    if (!train || !source_station || !destination_station) {\n      throw {\n        message: \"your input is incorrect either train number or  station name\",\n      };\n    }\n\n    // validate train if it runs beatween selected stations\n    const source_station_id = source_station.id;\n\n    const destination_station_id = destination_station.id;\n\n    const train_id = train.id;\n\n    const find_schedule_for_source = `select id, stop_order,minutes from schedule where station_id = '${source_station_id}' AND train_id = '${train_id}' `;\n\n    const find_schedule_for_destination = `select id, stop_order,minutes from schedule where station_id = '${destination_station_id}' AND train_id = '${train_id}' `;\n    const [[source_schedule], [destination_schedule]] = await Promise.all([\n      reservation.executeQuery(find_schedule_for_source),\n      reservation.executeQuery(find_schedule_for_destination),\n    ]);\n\n    if (!source_schedule || !destination_schedule) {\n      throw {\n        message:\n          \"selected train does not runs between selected source and destination\",\n      };\n    }\n    // validate stop order\n    if (source_schedule.stop_order > destination_schedule.stop_order) {\n      throw {\n        message:\n          \"selected train does not runs between selected source and destination\",\n      };\n    }\n\n    //  validate if trains runs on selected date or not .some trains runs two days or three days\n\n    // validate if ticket is available or not\n\n    // make response\n    const train_start_time = train.start_time;\n    const source_minute = source_schedule.minutes;\n\n    const train_date = validateDay(\n      train.days,\n      validate.startdate,\n      train.start_time,\n      source_minute * 1\n    );\n\n    if (!train_date) {\n      throw { message: \"Train does not run on specified date\" };\n    }\n\n    const formated_train_date = formatDateString(\n      train_date,\n      \"YYYY-MM-DD HH:mm:ss\"\n    );\n\n    const count_ticket_query = `SELECT COUNT(*)\n    FROM tickets\n    WHERE source_date = '${formated_train_date}'\n      AND train_id = ${train_id}\n      AND status = '${1}';\n    `;\n    let [{ count }] = await reservation.executeQuery(count_ticket_query);\n    count = count * 1;\n    if (count >= 250) {\n      throw {\n        message: \"Not available\",\n      };\n    }\n    if (count < 250 && count + validate.customers.length > 250) {\n      let difference = 250 - count;\n      throw {\n        message: `only ${difference} ticket is available`,\n      };\n    }\n\n    console.log(\n      \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFF\",\n      train_date,\n      formated_train_date\n    );\n\n    const destination_minutes = destination_schedule.minutes * 1;\n\n    const [start_d_j, arrival_time_at_source_station] = create_date(\n      train_date,\n      train_start_time,\n      source_minute * 1\n    );\n\n    const [end_date_of_journey, arrival_time_at_destination_station] =\n      create_date(train_date, train_start_time, destination_minutes);\n\n    const enddate = [\n      end_date_of_journey,\n      arrival_time_at_destination_station,\n    ].join(\" \");\n    let pnr = Date.now().toString().slice(-7) + \"123\";\n\n    // insert ticket in tickets table\n    const amount = calculate_amount(\n      train_id,\n      validate.customers.length,\n      destination_minutes - source_minute\n    );\n    const seatnumber = 1;\n    const userid = 1;\n\n    const { mobile, familymobile, email, district, country, pincode, state } =\n      validate;\n    const ticket_entry_data = {\n      quantity: validate.customers.length,\n      startdate: validate.startdate,\n      enddate,\n      amount,\n      mobile,\n      familymobile,\n      email,\n      status: 1,\n      district,\n      country,\n      pincode,\n      state,\n      pnr,\n      userid: (req as CustomRequest).user.id,\n      source_date: formated_train_date,\n      train_id,\n      start_schedule: source_schedule.id,\n      end_schedule: destination_schedule.id,\n    };\n    console.log(\"Ticket-entry-data\", ticket_entry_data);\n    const response = await reservation.insert_reserve_ticket(ticket_entry_data);\n    console.log(\"RRRRRrr\", response);\n    // insert customers in customer table\n\n    const insert_customer_response = await Promise.all(\n      validate.customers.map(({ first_name, last_name, dob }: any) => {\n        return CUSTOMERS.insert_customers({\n          first_name,\n          last_name,\n          dob: formatDateString(dob, \"YYYY-MM-DD HH:mm:ss\"),\n        });\n      })\n    );\n    console.log(insert_customer_response);\n\n    // const customer_entry_data = { firstname, lastname, dob };\n    // insert ticket id and customer id in customerticket table\n    const start = count + 1;\n    let all_seat: number[] = [];\n    const insert_customer_ticket = await Promise.all(\n      insert_customer_response.map((id: any, i: number) => {\n        const seat_number = start + i;\n        all_seat.push(seat_number);\n        return CUSTOEMER_TICKET.insert_customer_ticket({\n          customerid: id,\n          ticketid: response,\n          seat_number,\n        });\n      })\n    );\n    console.log(insert_customer_ticket);\n\n    const data = {\n      souce_station_name: source_station.stn_name,\n      source_station_departure_time: arrival_time_at_source_station,\n      start_date_of_journey: validate.startdate,\n      destination_station_name: destination_station.stn_name,\n      seats: all_seat,\n      passengers: validate.customers,\n      end_date_of_journey,\n      arrival_time_at_destination_station,\n      train_number: validate.trainnumber,\n      pnr,\n    };\n\n    res.status(200).json({\n      error: false,\n      data,\n      message: \"this is your ticket\",\n    });\n    // const customerticket_entry_data = { ticketid, customerid };\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message,\n      data: {},\n    });\n  }\n};\n\nexport const get_all_ticket = async (req: Request, res: Response) => {\n  try {\n    const general_ticket_query = `select * from general_ticker where agentid = '${\n      (req as CustomRequest).user.id\n    }'  `;\n    const reservation_ticket_query = `select * from tickets where userid = '${\n      (req as CustomRequest).user.id\n    }' `;\n\n    const [resevation_ticket, general_ticket] = await Promise.all([\n      reservation.executeQuery(reservation_ticket_query),\n      general_ticket_obj.executeQuery(general_ticket_query),\n    ]);\n    let message = \"success\";\n    if (!resevation_ticket && general_ticket) {\n      message = \"you did not cut a single ticket\";\n    }\n\n    res.status(200).json({\n      error: false,\n      message: message,\n      data: { resevation_ticket, general_ticket },\n    });\n  } catch (error) {\n    res.status(400).json({\n      error: true,\n    });\n  }\n};\n\nexport const cancel_ticket = async (req: Request, res: Response) => {\n  try {\n    console.log((req as CustomRequest).user);\n    const validate = await applyValidation(cancel_ticket_schema, req.body);\n    const find_query_ticket = `select id, status,userid from tickets where pnr = '${validate.pnr}'  `;\n    const ticket = await reservation.executeQuery(find_query_ticket);\n    console.log(ticket);\n    if (!ticket) {\n      throw {\n        message: \"this is wrong pnr\",\n      };\n    }\n    if (ticket.length == 0) {\n      throw {\n        message: \"this is wrong pnr\",\n      };\n    }\n    let response;\n\n    if ((req as CustomRequest).user.role === \"railway\") {\n      const response = await reservation.update_reserve_ticket(ticket[0].id, {\n        status: \"0\",\n      });\n      console.log(response);\n      if (!response) {\n        throw {\n          message: \"Internal server error\",\n        };\n      }\n      res.status(200).json({\n        error: false,\n        message: \"your ticket has been cancel\",\n        dtat: {\n          pnr: validate.pnr,\n        },\n      });\n      return;\n    } else if ((req as CustomRequest).user.id !== ticket[0].userid) {\n      throw {\n        message: \"you ca not cancel other's ticket\",\n      };\n    } else {\n      const response = await reservation.update_reserve_ticket(ticket[0].id, {\n        status: 0,\n      });\n      if (!response) {\n        throw {\n          message: \"Internal server error\",\n        };\n      }\n      res.status(200).json({\n        error: false,\n        message: \"your ticket has been cancel\",\n        dtat: {\n          pnr: validate.pnr,\n        },\n      });\n    }\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message,\n      data: {},\n    });\n  }\n};\n"]}
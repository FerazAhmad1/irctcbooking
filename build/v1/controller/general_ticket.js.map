{"version":3,"file":"general_ticket.js","sourceRoot":"/","sources":["v1/controller/general_ticket.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,gDAA4D;AAC5D,wDAA0D;AAC1D,6EAAyD;AACzD,gDAI6B;AAC7B,+DAAyC;AAQ5B,QAAA,qBAAqB,GAAG,CAAO,GAAY,EAAE,GAAa,EAAE,EAAE;IACzE,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,4BAAe,CAAC,8BAAqB,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,SAAS,GAAG,gFAAgF,QAAQ,CAAC,IAAI,0BAA0B,QAAQ,CAAC,IAAI,+BAA+B,CAAC;QACpL,IAAI,SAAS,GAAG,gFAAgF,QAAQ,CAAC,EAAE,0BAA0B,QAAQ,CAAC,EAAE,+BAA+B,CAAC;QAChL,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACtD,iBAAS,CAAC,YAAY,CAAC,SAAS,CAAC;YACjC,iBAAS,CAAC,YAAY,CAAC,SAAS,CAAC;SAClC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QACrC,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,EAAE,OAAO,EAAE,0BAA0B,EAAE,CAAC;SAC/C;QACD,IAAI,CAAC,SAAS,EAAE;YACd,MAAM;gBACJ,OAAO,EAAE,8BAA8B;aACxC,CAAC;SACH;QACD,MAAM,EAAE,GAAG;YACT,QAAQ,EAAE,YAAY,CAAC,QAAQ;YAC/B,SAAS,EAAE,YAAY,CAAC,SAAS;SAClC,CAAC;QACF,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC;QAC5E,MAAM,QAAQ,GAAG,2BAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;QAE7B,MAAM,MAAM,GAAG,iCAAwB,CACrC,QAAQ,CAAC,UAAU,EACnB,QAAQ,EACR,QAAQ,CAAC,QAAQ,CAClB,CAAC;QACF,MAAM,SAAS,GAAG,yBAAgB,CAAC,IAAI,IAAI,EAAE,EAAE,qBAAqB,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,MAAM,wBAAkB,CAAC,qBAAqB,CAAC;YAC9D,MAAM;YACN,OAAO,EAAG,GAAqB,CAAC,IAAI,CAAC,EAAE;YACvC,UAAU,EAAE,YAAY,CAAC,EAAE,GAAG,CAAC;YAC/B,eAAe,EAAE,SAAS,CAAC,EAAE,GAAG,CAAC;YACjC,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,QAAQ,CAAC,QAAQ;SAC5B,CAAC,CAAC;QAEH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,EAAE,EAAE,QAAQ,CAAC,EAAE;YACf,MAAM;SACP,CAAC,CAAC;KACJ;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,GAAG,GAAG,KAAY,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;YACpC,KAAK,EAAE,KAAK;YACZ,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,IAAI,EAAE,EAAE;SACT,CAAC,CAAC;KACJ;AACH,CAAC,CAAA,CAAC","sourcesContent":["import { Request, Response } from \"express\";\nimport { general_ticket_schema } from \"../helper.ts/schema\";\nimport { applyValidation } from \"../helper.ts/validation\";\nimport general_ticket_obj from \"../model/general_ticket\";\nimport {\n  calculate_distance,\n  calculate_general_amount,\n  formatDateString,\n} from \"../helper.ts/helpfn\";\nimport train_obj from \"../model/traindb\";\n\ninterface CustomRequest extends Request {\n  user: {\n    [index: string]: any;\n  };\n}\n\nexport const create_general_ticket = async (req: Request, res: Response) => {\n  try {\n    const validate = await applyValidation(general_ticket_schema, req.body);\n    let query_one = `select id, lat as latitude,long as longitude from station where code ILIKE '%${validate.from}%' OR stn_name ILIKE '%${validate.from}%' ORDER BY stn_name LIMIT 1 `;\n    let query_two = `select id, lat as latitude,long as longitude from station where code ILIKE '%${validate.to}%' OR stn_name ILIKE '%${validate.to}%' ORDER BY stn_name LIMIT 1 `;\n    const [[from_station], [to_staion]] = await Promise.all([\n      train_obj.executeQuery(query_one),\n      train_obj.executeQuery(query_two),\n    ]);\n    console.log(to_staion, from_station);\n    if (!from_station) {\n      throw { message: \"no source station found \" };\n    }\n    if (!to_staion) {\n      throw {\n        message: \"no destination station found\",\n      };\n    }\n    const p1 = {\n      latitude: from_station.latitude,\n      longitude: from_station.longitude,\n    };\n    const p2 = { latitude: to_staion.latitude, longitude: to_staion.longitude };\n    const distance = calculate_distance(p1, p2);\n    console.log(distance / 1000);\n\n    const amount = calculate_general_amount(\n      validate.train_type,\n      distance,\n      validate.quantity\n    );\n    const right_now = formatDateString(new Date(), \"YYYY-MM-DD HH:mm:ss\");\n    const response = await general_ticket_obj.insert_general_ticket({\n      amount,\n      agentid: (req as CustomRequest).user.id,\n      source_stn: from_station.id * 1,\n      destination_stn: to_staion.id * 1,\n      time: right_now,\n      quantity: validate.quantity,\n    });\n\n    res.status(200).json({\n      from: validate.from,\n      to: validate.to,\n      amount,\n    });\n  } catch (error) {\n    const err = error as any;\n    res.status(err.errorCode || 400).json({\n      error: false,\n      message: err.message,\n      data: {},\n    });\n  }\n};\n"]}
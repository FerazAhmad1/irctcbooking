{"version":3,"file":"users.js","sourceRoot":"/","sources":["v1/controller/users.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport {\n  signupSchema,\n  login_schema,\n  forgot_password_schema,\n  reset_password_schema,\n} from \"../helper.ts/schema\";\nimport { applyValidation } from \"../helper.ts/validation\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport { create_random_token } from \"../helper.ts/helpfn\";\nimport user from \"../model/dbusers\";\nimport html_template from \"../helper.ts/html\";\nimport { send_mail } from \"../helper.ts/helpfn\";\nimport crypto from \"crypto\";\nconst signToken = (id: any) =>\n  jwt.sign({ id }, process.env.JWT_SECRET || \"90d\", {\n    expiresIn: process.env.JWT_EXPIRES_IN,\n  });\n\n// export const signup = async (req: Request, res: Response) => {\n//   try {\n//     const validate = await applyValidation(signupSchema, req.body);\n//     console.log(\"ffffffff\", validate);\n//     const { firstName, lastName, email, mobile, password } = req.body;\n//     const signupBody = { firstName, lastName, email, mobile, password };\n//     const hashedPasssword = await bcrypt.hash(password, 12);\n//     signupBody.password = hashedPasssword;\n//     const id = await user.insertUser(signupBody);\n//     if (!id) {\n//       throw { message: \"this email already exist\" };\n//     }\n//     console.log(id);\n//     const token = signToken(id);\n//     res.status(200).json({\n//       error: false,\n//       message: \"signup successfull\",\n//       data: { token },\n//     });\n//   } catch (err) {\n//     const error = err as any;\n//     console.log(err);\n//     res.status(400).json({\n//       success: false,\n//       message: error.message,\n//     });\n//   }\n// };\n\nexport const signup_test = async (req: Request, res: Response) => {\n  try {\n    console.log(req.body);\n    res.status(200).json({\n      error: false,\n      message: \"you have signup successfully\",\n      data: req.body,\n    });\n  } catch (error) {}\n};\n\nexport const login = async (req: Request, res: Response) => {\n  try {\n    const { email = null, password: login_password = null } = req.body;\n    const login_body = { email: req.body.email, password: req.body.password };\n    const validate = await applyValidation(login_schema, login_body);\n    const db_user = await user.getUser({ email });\n    if (db_user.length === 0) {\n      throw { message: \"This email is not registed\" };\n    }\n    const { password: db_password, id } = db_user[0];\n    const validate_password = await bcrypt.compare(login_password, db_password);\n\n    if (!validate_password) {\n      throw { message: \"email or password is wrong\" };\n    }\n    const token = signToken(id);\n    res.status(200).json({\n      error: false,\n      message: \"login successfull\",\n      data: { token },\n    });\n  } catch (err) {\n    const error = err as any;\n    res.status(400).json({\n      error: true,\n      message: error.message,\n      data: {},\n    });\n  }\n};\n\nexport const update_role = async (req: any, res: Response) => {\n  try {\n    const data = { role: \"agent\" };\n    const response = await user.update_user(req.user.id, data);\n    if (response !== 1) {\n      throw {\n        message: \"Internal server error\",\n      };\n    }\n    const data_to_send = {\n      ...req.user,\n      role: \"agent\",\n      reset_password_token: undefined,\n      change_password_at: undefined,\n      password: undefined,\n    };\n\n    res.status(200).json({\n      error: false,\n      message: \"you are now agent\",\n      data_to_send,\n    });\n    console.log(\"update response\", response);\n  } catch (error) {\n    const err = error as any;\n    res.status(500).json({\n      error: true,\n      message: err.message,\n      data: {},\n    });\n  }\n};\n\nexport const forgot_password = async (req: Request, res: Response) => {\n  try {\n    const validate = await applyValidation(forgot_password_schema, req.body);\n    const response = await user.getUser({ email: validate.email });\n    if (response.length === 0) {\n      throw {\n        message: \"this email does not exist with us\",\n      };\n    }\n    const [random_token, hashed_token] = create_random_token();\n\n    await user.update_user(response[0].id, {\n      reset_password_token: hashed_token,\n    });\n    const reset_link = `${req.protocol}://${req.get(\n      \"host\"\n    )}/v1/user/resetpassword/${random_token}`;\n\n    let html = html_template.replace(\n      \"REPLACE_WITH_HTML_CONTENT\",\n      \"<p>To reset password please click on below tab</p>\"\n    );\n    html = html.replace(\"REPLACE_WITH_LINK\", reset_link);\n    html = html.replace(\"REPLACE_WITH_TAB\", \"reset password\");\n    const subject = \"reset your password\";\n    const sender = \"feraz@gmail.com\";\n    const mail_response = await send_mail({\n      html,\n      sender,\n      subject,\n      reciever: validate.email,\n    });\n    res.status(200).json({\n      reset_link,\n    });\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message,\n      data: {},\n    });\n  }\n};\nexport const reset_password = async (req: Request, res: Response) => {\n  try {\n    const token = req.params.token;\n    const password = req.body.password;\n    const validate = await applyValidation(reset_password_schema, req.body);\n    if (!token) {\n      throw {\n        message: \"you are not autorize to perform this action \",\n      };\n    }\n    const hashedToken = crypto.createHash(\"sha256\").update(token).digest(\"hex\");\n\n    const query_find_user = `select * from users where reset_password_token = '${hashedToken}'`;\n    const requested_user = await user.executeQuery(query_find_user);\n    if (!requested_user) {\n      throw {\n        message: \"Invalid user\",\n      };\n    }\n\n    const hashed_password = await bcrypt.hash(password, 12);\n    const query_update_password = await user.update_user(requested_user[0].id, {\n      password: hashed_password,\n    });\n    if (!query_update_password) {\n      throw {\n        errorCode: 500,\n        message: \"internal server error\",\n      };\n    }\n    res.status(200).json({\n      error: false,\n      message: \"your password has been change successfully\",\n      data: {},\n    });\n  } catch (error) {\n    const err = error as any;\n    res.status(err.errorCode || 401).json({\n      error: true,\n      message: err.message,\n      data: {},\n    });\n  }\n};\n"]}
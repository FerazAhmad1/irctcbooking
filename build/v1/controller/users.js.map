{"version":3,"file":"users.js","sourceRoot":"/","sources":["v1/controller/users.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport user from \"../model/dbusers\";\n\n\n\n// export const signup = async (req: Request, res: Response) => {\n//   try {\n//     const validate = await applyValidation(signupSchema, req.body);\n//     console.log(\"ffffffff\", validate);\n//     const { firstName, lastName, email, mobile, password } = req.body;\n//     const signupBody = { firstName, lastName, email, mobile, password };\n//     const hashedPasssword = await bcrypt.hash(password, 12);\n//     signupBody.password = hashedPasssword;\n//     const id = await user.insertUser(signupBody);\n//     if (!id) {\n//       throw { message: \"this email already exist\" };\n//     }\n//     console.log(id);\n//     const token = signToken(id);\n//     res.status(200).json({\n//       error: false,\n//       message: \"signup successfull\",\n//       data: { token },\n//     });\n//   } catch (err) {\n//     const error = err as any;\n//     console.log(err);\n//     res.status(400).json({\n//       success: false,\n//       message: error.message,\n//     });\n//   }\n// };\n\nexport const signup_otp = async (req: Request, res: Response) => {\n  try {\n    const response = await user.signup_otp(req.body)\n    if (!response || response.error) {\n      throw {\n        message: response?.message || \"your model function is not working\"\n      }\n    }\n    res.status(200).json(response)\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message || \"UNEXPECTED ERROR\",\n      data: {},\n    });\n  }\n};\n\nexport const verify_otp = async (req: Request, res: Response) => {\n  try {\n    const response = await user.verifyotp(req.body)\n    if (!response || response.error) {\n      throw {\n        message: response?.message || \"your model function is not working\"\n      }\n    }\n    res.status(200).json(response)\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message || \"UNEXPECTED ERROR\",\n      data: {},\n    });\n  }\n};\n\nexport const login = async (req: Request, res: Response) => {\n  try {\n    const response = await user.login(req.body)\n    if (!response || response.error) {\n      throw {\n        message: response?.message || \"your model function is not working\"\n      }\n    }\n    res.status(200).json(response)\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message || \"UNEXPECTED ERROR\",\n      data: {},\n    });\n  }\n};\n\nexport const update_role = async (req: any, res: Response) => {\n  try {\n\n    const response = await user.update_role(req.body, req.user);\n    if (!response || response.error) {\n      throw {\n        message: response?.message || \"your model function is not working\"\n      }\n    }\n    res.status(200).json(response);\n\n  } catch (error) {\n    const err = error as any;\n    res.status(500).json({\n      error: true,\n      message: err.message || \"UNEXPECTED ERROR\",\n      data: {},\n    });\n  }\n};\n\nexport const forgot_password = async (req: Request, res: Response) => {\n  try {\n    const host = req.get(\"host\");\n    const protocol = req.protocol\n    const response = await user.forgot_password(req.body, protocol, host);\n    if (!response || response.error) {\n      throw {\n        message: response?.message || \"your model function is not working\"\n      }\n    }\n    res.status(200).json(response);\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      error: true,\n      message: err.message || \"UNEXPECTED ERROR\",\n      data: {},\n    });\n  }\n};\n\n\nexport const reset_password = async (req: Request, res: Response) => {\n  try {\n    const token = req.params.token;\n    const password = req.body.password;\n    const response = await user.reset_password(req.body, token, password);\n    if (!response || response.error) {\n      throw {\n        message: response?.message || \"your model function is not working\"\n      }\n    }\n    res.status(200).json(response);\n\n  } catch (error) {\n    const err = error as any;\n    res.status(err.errorCode || 401).json({\n      error: true,\n      message: err.message || \"UNEXPECTED ERROR\",\n      data: {},\n    });\n  }\n};\n"]}
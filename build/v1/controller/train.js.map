{"version":3,"file":"train.js","sourceRoot":"/","sources":["v1/controller/train.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport { applyValidation } from \"../helper.ts/validation\";\nimport { search_train_schema } from \"../helper.ts/schema\";\nimport train_obj from \"../model/traindb\";\nimport { create_date } from \"../helper.ts/helpfn\";\nexport const search_train = async (req: Request, res: Response) => {\n  try {\n    const validate = await applyValidation(search_train_schema, req.body);\n\n    // need station id of source and destination\n    let query_one = `select * from station where code ILIKE '%${validate.from}%' OR stn_name ILIKE '%${validate.from}%' ORDER BY stn_name LIMIT 1 `;\n    let query_two = `select * from station where code ILIKE '%${validate.to}%' OR stn_name ILIKE '%${validate.to}%' ORDER BY stn_name LIMIT 1 `;\n    const [[from_station], [to_staion]] = await Promise.all([\n      train_obj.executeQuery(query_one),\n      train_obj.executeQuery(query_two),\n    ]);\n    console.log(to_staion, from_station);\n    if (!from_station) {\n      throw { message: \" source station not found \" };\n    }\n    if (!to_staion) {\n      throw {\n        message: \"no destination station found\",\n      };\n    }\n    const from_station_id = from_station.id;\n    const to_staion_id = to_staion.id;\n    console.log(from_station, to_staion);\n    // fetch all trains that runs beatwean the station\n    let query_three = `select s1.train_id as from_train_id,s1.minutes as from_minutes, s1.stop_order as from_stop_order,s2.train_id  as end_train_id,s2.minutes as end_minutes ,s2.stop_order as end_stop_order from schedule s1 JOIN schedule s2 ON s1.train_id=s2.train_id WHERE  s1.station_id=${from_station_id} AND s2.station_id=${to_staion_id} AND s1.stop_order < s2.stop_order `;\n\n    const scheduledTrain = await train_obj.executeQuery(query_three);\n    const day = new Date(validate.date_of_journey).getDay();\n\n    const trains_at_that_day = await Promise.all(\n      scheduledTrain.map(async (obj: any) => {\n        const train = await train_obj.executeQuery(\n          `select days,start_time,t_number from train where id = ${obj.from_train_id}`\n        );\n\n        const days = train[0].days;\n        const start_time = train[0].start_time;\n        const b = days[day] * 1 === 1;\n        const train_number = train[0].t_number;\n        console.log(b);\n        if (b) {\n          const [end_date_of_journey, end_time] = create_date(\n            validate.date_of_journey,\n            start_time,\n            obj.end_minutes * 1\n          );\n          return {\n            ...obj,\n            start_station_name: from_station.stn_name,\n            end_station_name: to_staion.stn_name,\n            start_date_of_journey: validate.date_of_journey,\n            start_time: start_time,\n            end_date_of_journey,\n            end_time,\n            train_number,\n          };\n        }\n        return {};\n      })\n    );\n\n    res.status(200).json({\n      error: false,\n      message: \"this is available train for your journey \",\n      data: trains_at_that_day,\n    });\n    //get trains detail from train table\n\n    // const trains_at_any_day = await Promise.all(\n    //   scheduledTrain.map((obj: any) =>\n    //     train_obj.executeQuery(\n    //       `select * from train where id = ${obj.from_train_id}`\n    //     )\n    //   )\n    // );\n    // console.log(trains_at_any_day, scheduledTrain);\n    // filter the trains runs only at that particular day\n\n    // const train_at_date = trains_at_any_day.filter(\n    //   (arr: any) => arr[0].days[day] * 1 === 1\n    // );\n    // console.log(\"gggggggggggg\",train_at_date)\n    // console.log(train_at_date, scheduledTrain);\n    // train_at_date.map((arr:any)=>{arr[0]})\n  } catch (error) {\n    const err = error as any;\n    res.status(400).json({\n      status: \"Fail\",\n      message: err.message,\n    });\n  }\n};\n"]}
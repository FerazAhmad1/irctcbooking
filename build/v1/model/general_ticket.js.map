{"version":3,"file":"general_ticket.js","sourceRoot":"/","sources":["v1/model/general_ticket.ts"],"names":[],"mappings":"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","sourcesContent":["import { appdb } from \"./appdb\";\nimport station_obj from \"./dbstation\";\nimport { calculate_distance, calculate_general_amount, formatDateString } from \"../helper.ts/helpfn\";\n\nimport train_obj from \"./traindb\";\n\ntype unique_data_type = {\n  [index: string]: string\n  uniquefield: any,\n  uniquefieldname: string,\n  field: string\n}\nclass general_ticket extends appdb {\n  constructor() {\n    super();\n    this.table = \"general_ticket\";\n    this.uniqueField = \"id\";\n  }\n\n  async insert_general_ticket(data: any) {\n    try {\n      return await this.insertRecord(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async get_general_ticket(data: unique_data_type) {\n    const { uniquefield, uniquefieldname, field } = data\n    this.where = `WHERE '${uniquefieldname}'='${uniquefield}'`\n\n    return this.select(this.table, field, this.where, '', '20')\n  }\n\n  async create_general_ticket(req_body: any, user: any) {\n    try {\n      const validate = req_body\n      const source_station_query = station_obj.search_station({ station_name_or_code: validate.from }, \"*\", 1)\n\n      const destination_station_query = station_obj.search_station({ station_name_or_code: validate.to }, \"*\", 1)\n\n      const [[from_station], [to_staion]] = await Promise.all([source_station_query, source_station_query, destination_station_query]);\n\n      if (!from_station) {\n        throw { message: \"no source station found \" };\n      }\n      if (!to_staion) {\n        throw {\n          message: \"no destination station found\",\n        };\n      }\n      const p1 = {\n        latitude: from_station.latitude,\n        longitude: from_station.longitude,\n      };\n      const p2 = { latitude: to_staion.latitude, longitude: to_staion.longitude };\n      const distance = calculate_distance(p1, p2);\n      console.log(distance / 1000);\n\n      const amount = calculate_general_amount(\n        validate.train_type,\n        distance,\n        validate.quantity\n      );\n      const right_now = formatDateString(new Date(), \"YYYY-MM-DD HH:mm:ss\");\n      const response = await this.insert_general_ticket({\n        amount,\n        agentid: user.id,\n        source_stn: from_station.id * 1,\n        destination_stn: to_staion.id * 1,\n        time: right_now,\n        quantity: validate.quantity,\n      });\n\n      const data = {\n        from: validate.from,\n        to: validate.to,\n        amount,\n      };\n\n      return {\n        error: false,\n        message: \"this is your general ticket\",\n        data\n      }\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\nconst obj = new general_ticket();\n\nexport default obj;\n"]}
{"version":3,"file":"dbusers.js","sourceRoot":"/","sources":["v1/model/dbusers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,mCAAgC;AAChC,gDAAmG;AACnG,oDAA2B;AAC3B,gDAA2D;AAC3D,6DAA6C;AAC7C,oDAA2B;AAgB3B,MAAa,OAAQ,SAAQ,aAAK;IAChC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IACD,MAAM,CAAC,WAAW,CAAC,GAAe;QAChC,IAAI,KAAK,GAAG,QAAQ,CAAC;QACrB,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;YACnB,KAAK,IAAI,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;SACpC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACK,UAAU,CAAC,OAAY;;YAC3B,IAAI;gBACF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aACzC;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;IACK,OAAO,CAAC,UAAsB;;YAClC,IAAI;gBACF,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC7C,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;gBACb,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAClB,MAAM,IAAI,GAAU,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAEhD,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;IAEK,WAAW,CAAC,EAAU,EAAE,IAAS;;YACrC,IAAI;gBACF,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;oBAC3D,IAAI,KAAK,KAAK,IAAI,EAAE;wBAClB,OAAO,GAAG,GAAG,SAAS,CAAC;qBACxB;yBAAM;wBACL,OAAO,GAAG,GAAG,OAAO,KAAK,GAAG,CAAC;qBAC9B;gBACH,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACd,IAAI,CAAC,KAAK,GAAG,eAAe,EAAE,GAAG,CAAA;gBACjC,MAAM,KAAK,GAAG,UAAU,IAAI,CAAC,KAAK,QAAQ,UAAU,IAAI,IAAI,CAAC,KAAK,GAAG,CAAA;gBACrE,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aACjC;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;IAGK,UAAU,CAAC,QAAa;;YAC5B,IAAI;gBACF,MAAM,QAAQ,GAAG,QAAQ,CAAC;gBAC1B,MAAM,EAAE,KAAK,EAAE,GAAG,QAAQ,CAAC;gBAC3B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC9C,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;oBACtB,MAAM,EAAE,QAAQ,GAAG,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBACvC,IAAI,QAAQ,EAAE;wBACZ,MAAM;4BACJ,OAAO,EAAE,0CAA0C;yBACpD,CAAC;qBACH;oBAED,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAClC,4CAA4C;oBAC5C,IAAI,UAAU,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,IAAI,EAAE,EAAE;wBACnD,sBAAsB;wBACtB,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC3B,MAAM,YAAY,GAAG,MAAM,iBAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;wBAChD,OAAO;4BACL,KAAK,EAAE,KAAK;4BACZ,OAAO,EAAE,+CAA+C;4BACxD,IAAI,EAAE,EAAE,GAAG,EAAE;yBACd,CAAC;qBACH;oBAED,8BAA8B;oBAE9B,IAAI,UAAU,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,IAAI,EAAE,EAAE;wBACnD,yCAAyC;wBACzC,MAAM,GAAG,GAAG,oBAAW,EAAE,CAAC;wBAC1B,MAAM,aAAa,GAAG,yBAAgB,CACpC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EACrC,qBAAqB,CACtB,CAAC;wBACF,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;wBAC1B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE;4BAC1C,UAAU,EAAE,aAAa;4BACzB,GAAG;yBACJ,CAAC,CAAC;wBACH,IAAI,CAAC,QAAQ,EAAE;4BACb,MAAM,EAAE,OAAO,EAAE,kCAAkC,EAAE,CAAC;yBACvD;wBACD,MAAM,YAAY,GAAG,MAAM,iBAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;wBAChD,OAAO,CAAC;4BACN,KAAK,EAAE,KAAK;4BACZ,OAAO,EAAE,+CAA+C;4BACxD,IAAI,EAAE,EAAE,GAAG,EAAE;yBACd,CAAC,CAAC;qBACJ;iBACF;gBACD,MAAM,GAAG,GAAG,oBAAW,EAAE,CAAC;gBAC1B,MAAM,aAAa,GAAG,yBAAgB,CACpC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,EACrC,qBAAqB,CACtB,CAAC;gBACF,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC;oBAChD,KAAK;oBACL,GAAG;oBACH,UAAU,EAAE,aAAa;iBAC1B,CAAC,CAAC;gBACH,IAAI,CAAC,mBAAmB,EAAE;oBACxB,MAAM,EAAE,OAAO,EAAE,wCAAwC,EAAE,CAAC;iBAC7D;gBACD,MAAM,YAAY,GAAG,MAAM,iBAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBAEhD,OAAO,CAAC;oBACN,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,+CAA+C;oBACxD,IAAI,EAAE,EAAE,GAAG,EAAE;iBACd,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAA;aACZ;QACH,CAAC;KAAA;IAEK,SAAS,CAAC,QAAa;;YAC3B,IAAI;gBACF,MAAM,QAAQ,GAAG,QAAQ,CAAA;gBACzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC9D,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;iBACrC;gBACD,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE9C,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,IAAI,EAAE,EAAE;oBACrC,MAAM;wBACJ,OAAO,EAAE,qBAAqB;qBAC/B,CAAC;iBACH;gBACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;gBACpB,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK,EAAE;oBAC9B,MAAM;wBACJ,OAAO,EAAE,eAAe;qBACzB,CAAC;iBACH;gBAED,MAAM,EACJ,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EACR,KAAK,EACL,MAAM,GACP,GAAG,QAAQ,CAAC;gBACb,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACzB,MAAM,eAAe,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBACxD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,EAAE;oBAChD,SAAS;oBACT,QAAQ;oBACR,QAAQ,EAAE,eAAe;oBACzB,KAAK;oBACL,MAAM;oBACN,GAAG,EAAE,IAAI;oBACT,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;gBACH,IAAI,CAAC,UAAU,EAAE;oBACf,MAAM;wBACJ,OAAO,EAAE,kCAAkC;qBAC5C,CAAC;iBACH;gBACD,MAAM,KAAK,GAAG,kBAAS,CAAC,EAAE,CAAC,CAAC;gBAE5B,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,6BAA6B;oBACtC,IAAI,EAAE;wBACJ,KAAK;qBACN;iBACF,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,GAAG,GAAG,KAAY,CAAC;gBACzB,MAAM,KAAK,CAAA;aACZ;QACH,CAAC;KAAA;IAGK,KAAK,CAAC,QAAa;;YACvB,IAAI;gBACF,MAAM,QAAQ,GAAG,QAAQ,CAAA;gBACzB,MAAM,EAAE,KAAK,GAAG,IAAI,EAAE,QAAQ,EAAE,cAAc,GAAG,IAAI,EAAE,GAAG,QAAQ,CAAC;gBACnE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC9C,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,MAAM,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;iBACjD;gBACD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACjD,MAAM,iBAAiB,GAAG,MAAM,gBAAM,CAAC,OAAO,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;gBAE5E,IAAI,CAAC,iBAAiB,EAAE;oBACtB,MAAM,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;iBACjD;gBACD,MAAM,KAAK,GAAG,kBAAS,CAAC,EAAE,CAAC,CAAC;gBAC5B,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,mBAAmB;oBAC5B,IAAI,EAAE,EAAE,KAAK,EAAE;iBAChB,CAAC;aACH;YAAC,OAAO,GAAG,EAAE;gBAEZ,MAAM,GAAG,CAAA;aACV;QACH,CAAC;KAAA;IAGK,WAAW,CAAC,QAAa,EAAE,IAAS;;YACxC,IAAI;gBACF,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;gBAC/B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;gBACvD,IAAI,QAAQ,KAAK,CAAC,EAAE;oBAClB,MAAM;wBACJ,OAAO,EAAE,uBAAuB;qBACjC,CAAC;iBACH;gBACD,MAAM,YAAY,mCACb,IAAI,KACP,IAAI,EAAE,OAAO,EACb,oBAAoB,EAAE,SAAS,EAC/B,kBAAkB,EAAE,SAAS,EAC7B,QAAQ,EAAE,SAAS,GACpB,CAAC;gBAEF,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,mBAAmB;oBAC5B,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE;iBACrC,CAAC;aAEH;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAA;aACZ;QACH,CAAC;KAAA;IAGK,eAAe,CAAC,QAAa,EAAE,QAAa,EAAE,IAAS;;YAC3D,IAAI;gBACF,MAAM,QAAQ,GAAG,QAAQ,CAAA;gBACzB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC/D,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;oBACzB,MAAM;wBACJ,OAAO,EAAE,mCAAmC;qBAC7C,CAAC;iBACH;gBACD,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,GAAG,4BAAmB,EAAE,CAAC;gBAE3D,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBACrC,oBAAoB,EAAE,YAAY;iBACnC,CAAC,CAAC;gBACH,MAAM,UAAU,GAAG,GAAG,QAAQ,MAAM,IAAI,0BAA0B,YAAY,EAAE,CAAC;gBAEjF,IAAI,IAAI,GAAG,cAAa,CAAC,OAAO,CAC9B,2BAA2B,EAC3B,oDAAoD,CACrD,CAAC;gBACF,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;gBACrD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;gBAC1D,MAAM,OAAO,GAAG,qBAAqB,CAAC;gBACtC,MAAM,MAAM,GAAG,iBAAiB,CAAC;gBACjC,MAAM,aAAa,GAAG,MAAM,kBAAS,CAAC;oBACpC,IAAI;oBACJ,MAAM;oBACN,OAAO;oBACP,QAAQ,EAAE,QAAQ,CAAC,KAAK;iBACzB,CAAC,CAAC;gBACH,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,wCAAwC;oBACjD,IAAI,EAAE,EAAE,UAAU,EAAE;iBACrB,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBAEd,MAAM,KAAK,CAAA;aACZ;QACH,CAAC;KAAA;IAIK,cAAc,CAAC,QAAa,EAAE,KAAU,EAAE,QAAa;;YAC3D,IAAI;gBACF,MAAM,QAAQ,GAAG,QAAQ,CAAA;gBACzB,IAAI,CAAC,KAAK,EAAE;oBACV,MAAM;wBACJ,OAAO,EAAE,8CAA8C;qBACxD,CAAC;iBACH;gBACD,MAAM,WAAW,GAAG,gBAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAE5E,MAAM,eAAe,GAAG,qDAAqD,WAAW,GAAG,CAAC;gBAC5F,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gBAChE,IAAI,CAAC,cAAc,EAAE;oBACnB,MAAM;wBACJ,OAAO,EAAE,cAAc;qBACxB,CAAC;iBACH;gBACD,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAAE;oBAC9C,MAAM,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAA;iBACtC;gBACD,MAAM,eAAe,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBACxD,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBACzE,QAAQ,EAAE,eAAe;iBAC1B,CAAC,CAAC;gBACH,IAAI,CAAC,qBAAqB,EAAE;oBAC1B,MAAM;wBACJ,SAAS,EAAE,GAAG;wBACd,OAAO,EAAE,uBAAuB;qBACjC,CAAC;iBACH;gBACD,OAAO;oBACL,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,4CAA4C;oBACrD,IAAI,EAAE,EAAE;iBACT,CAAC;aACH;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAA;aACZ;QACH,CAAC;KAAA;CAGF;AAxUD,0BAwUC;AACD,MAAM,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;AAC3B,kBAAe,IAAI,CAAC","sourcesContent":["import { appdb } from \"./appdb\";\nimport { send_otp, generateOTP, create_random_token, formatDateString } from \"../helper.ts/helpfn\";\nimport bcrypt from \"bcrypt\"\nimport { signToken, send_mail } from \"../helper.ts/helpfn\";\nimport html_template from \"../helper.ts/html\"\nimport crypto from \"crypto\"\nimport { error } from \"console\";\ninterface signup_user {\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly mobile: number;\n  readonly password: string;\n}\n\ntype login_user =\n  | {\n    [index: string]: string;\n    readonly email: string;\n  }\n  | { [index: string]: number; readonly id: number };\n\nexport class dbusers extends appdb {\n  constructor() {\n    super();\n    this.table = \"users\";\n    this.uniqueField = \"id\";\n  }\n  static whereClause(obj: login_user) {\n    let where = \"WHERE \";\n    for (let key in obj) {\n      where += `${key} = '${obj[key]}' `;\n    }\n    return where;\n  }\n  async insertUser(userObj: any) {\n    try {\n      return await this.insertRecord(userObj);\n    } catch (error) {\n      throw error;\n    }\n  }\n  async getUser(login_body: login_user) {\n    try {\n      this.where = dbusers.whereClause(login_body);\n      this.page = 1;\n      this.rpp = 1;\n      this.orderby = \"\";\n      const user: any[] = await this.listRecords(\"*\");\n\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async update_user(id: number, data: any) {\n    try {\n      const setClauses = Object.entries(data).map(([key, value]) => {\n        if (value === null) {\n          return `${key} = NULL`;\n        } else {\n          return `${key} = '${value}'`;\n        }\n      }).join(', ');\n      this.where = `WHERE id = '${id}'`\n      const query = `UPDATE ${this.table} SET ${setClauses} ${this.where} `\n      return this.executeQuery(query);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n  async signup_otp(req_body: any) {\n    try {\n      const validate = req_body;\n      const { email } = validate;\n      const db_user = await this.getUser({ email });\n      if (db_user.length > 0) {\n        const { password = null } = db_user[0];\n        if (password) {\n          throw {\n            message: \"this email is already registered with us\",\n          };\n        }\n\n        const { otp_expiry } = db_user[0];\n        // otp is not null and it is not expired yet\n        if (otp_expiry && new Date(otp_expiry) > new Date()) {\n          // resend the same otp\n          const { otp } = db_user[0];\n          const mailResponse = await send_otp(otp, email);\n          return {\n            error: false,\n            message: \"a six digit otp has been sended to your email\",\n            data: { otp },\n          };\n        }\n\n        // otp is not null and expired\n\n        if (otp_expiry && new Date(otp_expiry) < new Date()) {\n          // resend new otp and set new expiry time\n          const otp = generateOTP();\n          const newExpirytime = formatDateString(\n            new Date(Date.now() + 10 * 60 * 1000),\n            \"YYYY-MM-DD HH:mm:ss\"\n          );\n          const { id } = db_user[0];\n          const response = await this.update_user(id, {\n            otp_expiry: newExpirytime,\n            otp,\n          });\n          if (!response) {\n            throw { message: \"error is coming from update_user\" };\n          }\n          const mailResponse = await send_otp(otp, email);\n          return ({\n            error: false,\n            message: \"a six digit otp has been sended to your email\",\n            data: { otp },\n          });\n        }\n      }\n      const otp = generateOTP();\n      const newExpirytime = formatDateString(\n        new Date(Date.now() + 10 * 60 * 1000),\n        \"YYYY-MM-DD HH:mm:ss\"\n      );\n      const insertUser_response = await this.insertUser({\n        email,\n        otp,\n        otp_expiry: newExpirytime,\n      });\n      if (!insertUser_response) {\n        throw { message: \"error is coming from insertUser method\" };\n      }\n      const mailResponse = await send_otp(otp, email);\n\n      return ({\n        error: false,\n        message: \"a six digit otp has been sended to your email\",\n        data: { otp },\n      });\n    } catch (error) {\n      throw error\n    }\n  }\n\n  async verifyotp(req_body: any) {\n    try {\n      const validate = req_body\n      const db_user = await this.getUser({ email: validate.email });\n      if (db_user.length === 0) {\n        throw { message: \"user not found\" };\n      }\n      const { otp: dbotp, otp_expiry } = db_user[0];\n\n      if (new Date(otp_expiry) < new Date()) {\n        throw {\n          message: \"otp has been expire\",\n        };\n      }\n      console.log(db_user)\n      if (validate.otp * 1 !== dbotp) {\n        throw {\n          message: \"Incorrect otp\",\n        };\n      }\n\n      const {\n        firstName: firstname,\n        lastName: lastname,\n        password,\n        email,\n        mobile,\n      } = validate;\n      const id = db_user[0].id;\n      const hashed_password = await bcrypt.hash(password, 12);\n      const updateUser = await user.update_user(id * 1, {\n        firstname,\n        lastname,\n        password: hashed_password,\n        email,\n        mobile,\n        otp: null,\n        otp_expiry: null,\n      });\n      if (!updateUser) {\n        throw {\n          message: \"error is coming from update_user\",\n        };\n      }\n      const token = signToken(id);\n\n      return {\n        error: false,\n        message: \"user is signup successfully\",\n        data: {\n          token,\n        },\n      };\n    } catch (error) {\n      const err = error as any;\n      throw error\n    }\n  }\n\n\n  async login(req_body: any) {\n    try {\n      const validate = req_body\n      const { email = null, password: login_password = null } = req_body;\n      const db_user = await this.getUser({ email });\n      if (db_user.length === 0) {\n        throw { message: \"This email is not registed\" };\n      }\n      const { password: db_password, id } = db_user[0];\n      const validate_password = await bcrypt.compare(login_password, db_password);\n\n      if (!validate_password) {\n        throw { message: \"email or password is wrong\" };\n      }\n      const token = signToken(id);\n      return {\n        error: false,\n        message: \"login successfull\",\n        data: { token },\n      };\n    } catch (err) {\n\n      throw err\n    }\n  }\n\n\n  async update_role(req_body: any, user: any) {\n    try {\n      const data = { role: \"agent\" };\n      const response = await this.update_user(user.id, data);\n      if (response !== 1) {\n        throw {\n          message: \"Internal server error\",\n        };\n      }\n      const data_to_send = {\n        ...user,\n        role: \"agent\",\n        reset_password_token: undefined,\n        change_password_at: undefined,\n        password: undefined,\n      };\n\n      return {\n        error: false,\n        message: \"you are now agent\",\n        data: { updated_user: data_to_send },\n      };\n\n    } catch (error) {\n      throw error\n    }\n  }\n\n\n  async forgot_password(req_body: any, protocol: any, host: any) {\n    try {\n      const validate = req_body\n      const response = await user.getUser({ email: validate.email });\n      if (response.length === 0) {\n        throw {\n          message: \"this email does not exist with us\",\n        };\n      }\n      const [random_token, hashed_token] = create_random_token();\n\n      await user.update_user(response[0].id, {\n        reset_password_token: hashed_token,\n      });\n      const reset_link = `${protocol}://${host}/v1/user/resetpassword/${random_token}`;\n\n      let html = html_template.replace(\n        \"REPLACE_WITH_HTML_CONTENT\",\n        \"<p>To reset password please click on below tab</p>\"\n      );\n      html = html.replace(\"REPLACE_WITH_LINK\", reset_link);\n      html = html.replace(\"REPLACE_WITH_TAB\", \"reset password\");\n      const subject = \"reset your password\";\n      const sender = \"feraz@gmail.com\";\n      const mail_response = await send_mail({\n        html,\n        sender,\n        subject,\n        reciever: validate.email,\n      });\n      return {\n        error: false,\n        message: \"resetlink hasbeen sended to your email\",\n        data: { reset_link },\n      };\n    } catch (error) {\n\n      throw error\n    }\n  }\n\n\n\n  async reset_password(req_body: any, token: any, password: any) {\n    try {\n      const validate = req_body\n      if (!token) {\n        throw {\n          message: \"you are not autorize to perform this action \",\n        };\n      }\n      const hashedToken = crypto.createHash(\"sha256\").update(token).digest(\"hex\");\n\n      const query_find_user = `select * from users where reset_password_token = '${hashedToken}'`;\n      const requested_user = await user.executeQuery(query_find_user);\n      if (!requested_user) {\n        throw {\n          message: \"Invalid user\",\n        };\n      }\n      if (requested_user[0].email !== validate.email) {\n        throw { message: \"unauthorize user\" }\n      }\n      const hashed_password = await bcrypt.hash(password, 12);\n      const query_update_password = await user.update_user(requested_user[0].id, {\n        password: hashed_password,\n      });\n      if (!query_update_password) {\n        throw {\n          errorCode: 500,\n          message: \"internal server error\",\n        };\n      }\n      return {\n        error: false,\n        message: \"your password has been change successfully\",\n        data: {},\n      };\n    } catch (error) {\n      throw error\n    }\n  }\n\n\n}\nconst user = new dbusers();\nexport default user;\n"]}
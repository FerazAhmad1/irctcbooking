{"version":3,"file":"dbusers.js","sourceRoot":"/","sources":["v1/model/dbusers.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mCAAgC;AAgBhC,MAAa,OAAQ,SAAQ,aAAK;IAChC;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IACD,MAAM,CAAC,WAAW,CAAC,GAAe;QAChC,IAAI,KAAK,GAAG,QAAQ,CAAC;QACrB,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;YACnB,KAAK,IAAI,GAAG,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;SACpC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACK,UAAU,CAAC,OAAoB;;YACnC,IAAI;gBACF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aACzC;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;IACK,OAAO,CAAC,UAAsB;;YAClC,IAAI;gBACF,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC7C,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;gBACb,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBAClB,MAAM,IAAI,GAAU,MAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAEhD,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;IACK,WAAW,CAAC,EAAU,EAAE,IAAS;;YACrC,IAAI;gBACF,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;aAC1C;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;CACF;AAxCD,0BAwCC;AACD,MAAM,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;AAC3B,kBAAe,IAAI,CAAC","sourcesContent":["import { appdb } from \"./appdb\";\n\ninterface signup_user {\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly mobile: number;\n  readonly password: string;\n}\n\ntype login_user =\n  | {\n      [index: string]: string;\n      readonly email: string;\n    }\n  | { [index: string]: number; readonly id: number };\n\nexport class dbusers extends appdb {\n  constructor() {\n    super();\n    this.table = \"users\";\n    this.uniqueField = \"id\";\n  }\n  static whereClause(obj: login_user) {\n    let where = \"WHERE \";\n    for (let key in obj) {\n      where += `${key} = '${obj[key]}' `;\n    }\n    return where;\n  }\n  async insertUser(userObj: signup_user) {\n    try {\n      return await this.insertRecord(userObj);\n    } catch (error) {\n      throw error;\n    }\n  }\n  async getUser(login_body: login_user) {\n    try {\n      this.where = dbusers.whereClause(login_body);\n      this.page = 1;\n      this.rpp = 1;\n      this.orderby = \"\";\n      const user: any[] = await this.listRecords(\"*\");\n\n      return user;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async update_user(id: number, data: any) {\n    try {\n      return await this.updateRecord(id, data);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\nconst user = new dbusers();\nexport default user;\n"]}
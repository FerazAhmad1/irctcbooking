{"version":3,"file":"dbreservetickets.js","sourceRoot":"/","sources":["v1/model/dbreservetickets.ts"],"names":[],"mappings":"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","sourcesContent":["import { appdb } from \"./appdb\";\nimport train_obj from \"./traindb\";\nimport station_obj from \"./dbstation\";\nimport schedule_obj from \"./dbschedule\";\nimport user_obj from \"./dbusers\"\nimport general_ticket_obj from \"./general_ticket\"\nimport customer_ticket_obj from \"../model/dbcustomerticket\"\nimport { validateDay, formatDateString, create_date, calculate_amount, create_insert_many_query } from \"../helper.ts/helpfn\";\n\ntype reserve_ticket_type = {\n  [index: string]: string\n  uniquefield: any,\n  uniquefieldname: string,\n  field: string\n}\ntype general_object = {\n  [index: string]: string\n}\nclass dbreservetickets extends appdb {\n  constructor() {\n    super();\n    this.table = \"tickets\";\n    this.uniqueField = \"id\";\n  }\n\n  async count_ticket_in_a_train_at_specified_date(train_source_date: any, train_id: any, ticket_status: any) {\n    this.where = ` WHERE source_date = '${train_source_date} 'AND train_id = ${train_id} AND status = '${ticket_status}'`;\n    return this.selectCount(this.table, this.uniqueField, this.where)\n  }\n\n\n  async insert_reserve_ticket(data: any) {\n    try {\n      console.log(\"reserveticket reserveticket reserve ticket\", data)\n      return await this.insertRecord(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async update_reserve_ticket(id: any, data: any) {\n    try {\n      console.log(\"update reserve ticket\", id, data);\n      return await this.updateRecord(id, data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async get_rserve_ticket(data: reserve_ticket_type) {\n    const { uniquefield, uniquefieldname, field } = data\n    this.where = `WHERE \"${uniquefieldname}\"='${uniquefield}'`\n\n    return this.select(this.table, field, this.where, '', '20')\n  }\n\n  async ticket_reservation(request_body: any, user: any) {\n\n    try {\n\n      const validate = { ...request_body }\n\n      // find train source station and destination station\n      const train_query = train_obj.get_train({ uniquefieldname: \"t_number\", uniquefield: validate.trainnumber, field: \"*\" });\n\n\n      // find station source and destination \n\n      const source_station_query = station_obj.search_station({ id: validate.from_id }, \"*\", 1)\n\n      const destination_station_query = station_obj.search_station({ id: validate.to_id }, \"*\", 1)\n\n\n      const [[train], [source_station], [destination_station]] = await Promise.all([train_query, source_station_query, destination_station_query,]);\n      console.log(train, \"fdsfddssdssdfsdfsdfsdfdsssfdsfsfsdfdsddfsdssdfsdfdsfsdfsfd\")\n\n      // validate train if it runs beatween selected stations\n      const source_station_id = source_station.id;\n\n      const destination_station_id = destination_station.id;\n\n      const train_id = train.id;\n\n      // find schedule as per station and train for both source and destination\n\n      const source_schedule_query = schedule_obj.get_schedule({ train_id, station_id: source_station_id, fields: \" id,stop_order,minutes_required_to_reach_from_source_station as minutes\" })\n\n      const destination_schedule_query = schedule_obj.get_schedule({ train_id, station_id: destination_station_id, fields: \" id,stop_order,minutes_required_to_reach_from_source_station as minutes\" })\n\n      const [[source_schedule], [destination_schedule]] = await Promise.all([source_schedule_query, destination_schedule_query,]);\n\n      // check if both source schedule and destination schedule available for same train \n\n      if (!source_schedule || !destination_schedule) {\n        throw {\n          message:\n            \"selected train does not runs between selected source and destination\",\n        };\n      }\n\n      // validate stop order\n\n      if (source_schedule.stop_order > destination_schedule.stop_order) {\n        throw {\n          message:\n            \"selected train does not runs between selected source and destination\",\n        };\n      }\n\n\n      const train_start_time = train.start_time;\n      const source_minute = source_schedule.minutes;\n\n      // validate Day\n\n      const train_date = validateDay(\n        train.days,\n        validate.startdate,\n        train.start_time,\n        source_minute * 1\n      );\n\n      if (!train_date) {\n\n        throw {\n          message: \"Train does not run on specified date\",\n        }\n      }\n\n      const formated_train_date = formatDateString(\n        train_date,\n        \"YYYY-MM-DD HH:mm:ss\"\n      );\n\n\n      // count number of ticket already reserved\n\n      let count = await this.count_ticket_in_a_train_at_specified_date(formated_train_date, train_id, 1);\n\n\n      count = count * 1;\n      console.log(\"LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\", count)\n      if (count >= 250) {\n        throw {\n          message: \"Not available\",\n        };\n      }\n      if (count < 250 && count + validate.customers.length > 250) {\n        let difference = 250 - count;\n        throw {\n          message: `only ${difference} ticket is available`,\n        };\n      }\n\n\n      const destination_minutes = destination_schedule.minutes * 1;\n\n      // create date  based on train running date and total minutes to reach the station from source station\n\n      const [start_d_j, arrival_time_at_source_station] = create_date(train_date, train_start_time, source_minute * 1);\n\n      const [end_date_of_journey, arrival_time_at_destination_station] = create_date(train_date, train_start_time, destination_minutes);\n\n      const enddate = [end_date_of_journey, arrival_time_at_destination_station].join(\" \");\n\n      // generate pnr\n\n      let pnr = Date.now().toString().slice(-7) + \"123\";\n\n      // calculate amount on the basis of travelling minutes and number of customer on ticket\n      const amount = calculate_amount(train_id, validate.customers.length, destination_minutes - source_minute);\n\n      const { mobile, familymobile, email, district, country, pincode, state } = validate;\n\n      // create data for reservation\n      const ticket_entry_data = {\n        quantity: validate.customers.length,\n        startdate: validate.startdate,\n        enddate,\n        amount,\n        mobile,\n        familymobile,\n        email,\n        status: 1,\n        district,\n        country,\n        pincode,\n        state,\n        pnr,\n        userid: user.id,\n        source_date: formated_train_date,\n        train_id,\n        start_schedule: source_schedule.id,\n        end_schedule: destination_schedule.id,\n      };\n\n      console.log(\"Ticket-entry-data\", ticket_entry_data);\n      const reservation_ticket_id = await this.insert_reserve_ticket(ticket_entry_data);\n\n      console.log(reservation_ticket_id, \"$%$%$%$%$%$%$%$%**WWWWWWW\")\n\n      // insert customers in customer table\n\n      console.log(validate)\n      const customer = validate.customers.map(({ firstname, lastname, dob }: any) => {\n        return {\n          firstname,\n          lastname,\n          role: \"customer\",\n          dob: formatDateString(dob, \"YYYY-MM-DD HH:mm:ss\"),\n        }\n      })\n\n      const query_for_Insert_Many = create_insert_many_query(\"users\", customer)\n\n      const customer_response = await this.insertmany(query_for_Insert_Many);\n      console.log(\"QQQQQQQQQQQQQQsfsfsfsfsfggderewedswe\", customer_response, query_for_Insert_Many)\n      const start = count + 1\n      console.log(start, count)\n      const all_seat: any[] = []\n\n      const insert_response_customer_ticket = await Promise.all(customer_response.map((customer: any, i: number) => {\n        const seat_number = start + i\n        all_seat.push(seat_number)\n        return customer_ticket_obj.insert_customer_ticket({ seat_number, customerid: customer.id, ticketid: reservation_ticket_id })\n      }))\n\n      const data = {\n        souce_station_name: source_station.stn_name,\n        source_station_departure_time: arrival_time_at_source_station,\n        start_date_of_journey: validate.startdate,\n        destination_station_name: destination_station.stn_name,\n        seats: all_seat,\n        passengers: validate.customers,\n        end_date_of_journey,\n        arrival_time_at_destination_station,\n        train_number: validate.trainnumber,\n        pnr,\n      };\n      return {\n        error: false,\n        data,\n        message: \"this is your ticket\"\n      }\n\n\n    } catch (error) {\n\n      throw error\n    }\n  }\n\n\n  // cancel ticket\n  async cancel_ticket(req_body: any, user: general_object) {\n    try {\n\n      const validate = req_body\n\n      const ticket = await this.get_rserve_ticket({ uniquefield: validate.pnr, uniquefieldname: 'pnr', field: \"id,status,userid\" })\n\n      if (!ticket) {\n        throw {\n          message: \"this is wrong pnr\",\n        };\n      }\n      if (ticket.length == 0) {\n        throw {\n          message: \"this is wrong pnr\",\n        };\n      }\n      let response;\n\n      if (user.role === \"railway\") {\n        const response = await this.update_reserve_ticket(ticket[0].id, {\n          status: \"0\",\n        });\n        console.log(response);\n        if (!response) {\n          throw {\n            message: \"Internal server error\",\n          };\n        }\n\n        return;\n      } else if (user.id !== ticket[0].userid) {\n        throw {\n          message: \"you ca not cancel other's ticket\",\n        };\n      } else {\n        const response = await this.update_reserve_ticket(ticket[0].id, {\n          status: 0,\n        });\n        if (!response) {\n          throw {\n            message: \"Internal server error\",\n          };\n        }\n\n        return {\n          error: false,\n          message: \"your ticket has been cancel\",\n          dtat: {\n            pnr: validate.pnr,\n          },\n        };\n      }\n    } catch (error) {\n      throw error\n    }\n  }\n\n\n  async get_all_ticket(user: general_object, page: number) {\n    try {\n\n      // const general_ticket_query = `select * from general_ticker where agentid = '${(req as CustomRequest).user.id}'  `;\n      // const reservation_ticket_query = `select * from tickets where userid = '${(req as CustomRequest).user.id}' `;\n      const reservation_query = this.get_rserve_ticket({ uniquefield: user.id, uniquefieldname: \"userid\", field: \"*\" })\n\n      const general_ticket_query = general_ticket_obj.get_general_ticket({ uniquefield: user.id, uniquefieldname: \"agentid\", field: \"*\" })\n\n      const [resevation_ticket, general_ticket] = await Promise.all([reservation_query, general_ticket_query]);\n      let message = \"success\";\n      if (!resevation_ticket && general_ticket) {\n        message = \"you did not cut a single ticket\";\n      }\n\n      return {\n        error: false,\n        message: message,\n        data: { resevation_ticket, general_ticket },\n      };\n    } catch (error) {\n\n      throw error\n    }\n\n  }\n\n\n}\nconst reservation = new dbreservetickets();\nexport default reservation;\n"]}
{"version":3,"file":"db.js","sourceRoot":"/","sources":["v1/library/db.ts"],"names":[],"mappings":"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","sourcesContent":["import { connection } from \"./connection\";\n\nexport class db {\n  public table: string = \"\";\n  private connection: any = \"\";\n  public query: string = \"\";\n  public uniqueField: string = \"\";\n  public where: string = \"\";\n  public orderby: string = \"\";\n  public rpp: number = 20;\n  public page: number = 1;\n  public limit: string = \"\";\n  public url: string = \"\";\n  public totalRecords: number = 0;\n\n  constructor() {}\n\n  /**\n   * This function will execute given Query with checking of DB connection. It will return appropriate type of response in case of insert, update, delete, select etc.\n   * @param query query string\n   * @returns array | number\n   */\n  async executeQuery(query: string) {\n    this.query = query;\n    let connectionObj = new connection();\n\n    try {\n      this.connection = await connectionObj.getConnection();\n      if (!this.connection) {\n        throw \"Not connected to database.\";\n      }\n\n      let result = await this.connection.query(query);\n      if (!result) return false;\n\n      if (result.command == \"INSERT\") {\n        if (this.uniqueField != \"\") return result[\"rows\"][0][\"id\"];\n        else return result[\"rowCount\"];\n      } else if (result.command == \"UPDATE\") return result[\"rowCount\"];\n      else if (result.command == \"REPLACE\") return result[\"rowCount\"];\n      else if (result.command == \"DELETE\") return result[\"rowCount\"];\n      else return result.rows;\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n  }\n\n  /**\n   * Select records from DB with appropriate table and required where conditions. This function will use in SelectRecord, allRecords, list Records function with appropriate parameters.\n   * @param table table name\n   * @param fields fields of DB\n   * @param where where condition\n   * @param orderby order by starting with \" ORDER BY\"\n   * @param limit limit of DB records required\n   * @returns array\n   */\n  select(\n    table: string,\n    fields: string,\n    where: string,\n    orderby: string,\n    limit: string\n  ) {\n    let query =\n      \"SELECT \" +\n      fields +\n      \" FROM \" +\n      table +\n      \" \" +\n      where +\n      \" \" +\n      orderby +\n      \" \" +\n      limit;\n    console.log(\"fffffffffffffffffff\", query);\n    return this.executeQuery(query);\n  }\n\n  /**\n   * Insert given data into given table. Given data should be key-value pair object with DB field name and it's value.\n   * @param table table name\n   * @param data array of data\n   */\n  insert(table: string, data: any) {\n    let columnsArray: any = new Array();\n    let valuesArray: any = new Array();\n\n    for (let key in data) {\n      columnsArray.push(key);\n      valuesArray.push(data[key]);\n    }\n    let columns: string = columnsArray.join(\",\");\n\n    for (let i = 0; i < valuesArray.length; i++) {\n      valuesArray[i] = String(valuesArray[i]);\n      valuesArray[i] = valuesArray[i].replace(/'/g, \"''\");\n    }\n    let values: string = valuesArray.join(\"','\");\n\n    let query =\n      \"INSERT INTO \" +\n      table +\n      \"(\" +\n      columns +\n      \") values('\" +\n      values +\n      \"') RETURNING id\";\n    return this.executeQuery(query);\n  }\n\n  /**\n   * Update given data into table with appropriate where condition.\n   * @param table tablename\n   * @param data key value pair array/object\n   * @param where Where condition\n   */\n  update(table: string, data: any, where: string) {\n    let updatestring: string = \"\";\n\n    for (let key in data) {\n      if (updatestring !== \"\") {\n        updatestring += \",\";\n      }\n      if (data[key] == null) {\n        updatestring += key + \"=''\";\n      } else {\n        data[key] = String(data[key]);\n        updatestring += key + \"='\" + data[key].replace(/'/g, \"''\") + \"'\";\n      }\n    }\n\n    let query = \"UPDATE \" + table + \" SET \" + updatestring + \" \" + where;\n    return this.executeQuery(query);\n  }\n\n  /**\n   * Delete record from table with given where condition.\n   * @param table tablename\n   * @param where where condition\n   */\n  delete(table: string, where: string) {\n    let query = \"DELETE FROM \" + table + \" \" + where;\n    return this.executeQuery(query);\n  }\n\n  /**\n   * Select given fields from given table with unique id.\n   * @param id table unique id\n   * @param fields DB fields\n   */\n  selectRecord(id: number, fields = \"*\") {\n    return this.select(\n      this.table,\n      fields,\n      \"WHERE \" + this.uniqueField + \" = \" + id,\n      this.orderby,\n      this.limit\n    );\n  }\n\n  /**\n   * Insert record into DB with given array\n   * @param data key-value pair object\n   */\n  insertRecord(data: any) {\n    return this.insert(this.table, data);\n  }\n\n  /**\n   * Update given data with unique id\n   * @param id unique id\n   * @param data key-value pair array\n   */\n  updateRecord(id: number, data: any) {\n    return this.update(\n      this.table,\n      data,\n      \" WHERE \" + this.uniqueField + \"=\" + id\n    );\n  }\n\n  /**\n   * Delete record with given unique id\n   * @param id unique id\n   */\n  deleteRecord(id: number) {\n    return this.delete(this.table, \" WHERE \" + this.uniqueField + \"=\" + id);\n  }\n\n  /**\n   * Return records with given fields and limit.\n   * @param fields DB fields\n   */\n  async listRecords(fields = \"*\") {\n    console.log(\"ttttttttttttt\", this.where);\n    let start = (this.page - 1) * this.rpp;\n    let result = await this.select(\n      this.table,\n      fields,\n      this.where,\n      this.orderby,\n      \"LIMIT \" + this.rpp + \" OFFSET \" + start\n    );\n    return !result ? [] : result;\n  }\n\n  /**\n   * Return all records with given where condition and order by.\n   * @param fields fields\n   */\n  async allRecords(fields = \"*\") {\n    let result = await this.select(\n      this.table,\n      fields,\n      this.where,\n      this.orderby,\n      \"\"\n    );\n    return !result ? [] : result;\n  }\n\n  /**\n   * Get count of records with given condition\n   * @param table tablename\n   * @param uniqueField unique fields\n   * @param where where condition\n   */\n  async selectCount(table: string, uniqueField: string, where: string) {\n    let query: string =\n      \"SELECT count(\" + uniqueField + \") as cnt FROM \" + table + \" \" + where;\n    let result: any[] = await this.executeQuery(query);\n    return result.length > 0 ? result[0].cnt : 0;\n  }\n\n  /**\n   * Get total pages of records with given condition and given rpp.\n   */\n  async getTotalPages() {\n    this.totalRecords = await this.selectCount(\n      this.table,\n      this.uniqueField,\n      this.where\n    );\n    let totalpages: number = Math.ceil(this.totalRecords / this.rpp);\n    return totalpages;\n  }\n}\n"]}
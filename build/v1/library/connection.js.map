{"version":3,"file":"connection.js","sourceRoot":"/","sources":["v1/library/connection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4DAAoC;AACpC,2BAAiC;AAEjC,MAAa,UAAU;IAGrB;;OAEG;IACG,aAAa;;YACjB,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;gBAC1B,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM;oBAAE,OAAO,KAAK,CAAC;aAC3B;YACD,OAAO,UAAU,CAAC,UAAU,CAAC;QAC/B,CAAC;KAAA;IAED;;OAEG;IACG,OAAO;;YACX,UAAU,CAAC,UAAU,GAAG,IAAI,SAAI,CAAC;gBAC/B,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY;aAC3C,CAAC,CAAC;YAEH,IAAI;gBACF,oHAAoH;gBACpH,IAAI,eAAe,GAAG,UAAU,GAAQ;oBACtC,OAAO,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAU,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;gBACtE,CAAC,CAAC;gBACF,kGAAkG;gBAClG,IAAI,WAAW,GAAG,UAAU,GAAQ;oBAClC,OAAO,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAU,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;gBAC7D,CAAC,CAAC;gBACF,UAAK,CAAC,aAAa,CAAC,UAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;gBAC/D,UAAK,CAAC,aAAa,CAAC,UAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBAEtD,IAAI,MAAM,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACnD,IAAI,MAAM,EAAE;oBACV,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;iBACpC;gBACD,OAAO,MAAM,CAAC;aACf;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC;gBAC9B,OAAO,KAAK,CAAC;aACd;QACH,CAAC;KAAA;CACF;AA7CD,gCA6CC","sourcesContent":["import dateFormat from \"dateformat\";\nimport { Pool, types } from \"pg\";\n\nexport class connection {\n  static connection: any;\n\n  /**\n   * Create connection by Singletone method. If connection is not created, then only new connection will create.\n   */\n  async getConnection() {\n    if (!connection.connection) {\n      let result = await this.connect();\n      if (!result) return false;\n    }\n    return connection.connection;\n  }\n\n  /**\n   * This function will connect DB with required DB credentials.\n   */\n  async connect() {\n    connection.connection = new Pool({\n      connectionString: process.env.DATABASE_URL,\n    });\n\n    try {\n      /* Convert \"timestamp without timezone\" into local timezone. eg. 2019-01-23T10:25:33.000Z --> 2019-01-23 15:55:33 */\n      var datetimeParseFn = function (val: any) {\n        return val === null ? null : dateFormat(val, \"yyyy-mm-dd HH:MM:ss\");\n      };\n      /* Convert \"date\" into local date without timezone. eg. 2019-10-28T18:30:00.000Z --> 2019-10-29 */\n      var dateParseFn = function (val: any) {\n        return val === null ? null : dateFormat(val, \"yyyy-mm-dd\");\n      };\n      types.setTypeParser(types.builtins.TIMESTAMP, datetimeParseFn);\n      types.setTypeParser(types.builtins.DATE, dateParseFn);\n\n      let result = await connection.connection.connect();\n      if (result) {\n        console.log(\"Database Connected!\");\n      }\n      return result;\n    } catch (error) {\n      console.log(error);\n      connection.connection = false;\n      return false;\n    }\n  }\n}\n"]}